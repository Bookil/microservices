// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/auth_manager.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./internal/ports/auth_manager.go -destination=mocks/auth_manager_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Bookil/microservices/auth/internal/application/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthManager is a mock of AuthManager interface.
type MockAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthManagerMockRecorder
}

// MockAuthManagerMockRecorder is the mock recorder for MockAuthManager.
type MockAuthManagerMockRecorder struct {
	mock *MockAuthManager
}

// NewMockAuthManager creates a new mock instance.
func NewMockAuthManager(ctrl *gomock.Controller) *MockAuthManager {
	mock := &MockAuthManager{ctrl: ctrl}
	mock.recorder = &MockAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthManager) EXPECT() *MockAuthManagerMockRecorder {
	return m.recorder
}

// CompareVerificationCode mocks base method.
func (m *MockAuthManager) CompareVerificationCode(ctx context.Context, userID domain.UserID, verificationCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareVerificationCode", ctx, userID, verificationCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareVerificationCode indicates an expected call of CompareVerificationCode.
func (mr *MockAuthManagerMockRecorder) CompareVerificationCode(ctx, userID, verificationCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareVerificationCode", reflect.TypeOf((*MockAuthManager)(nil).CompareVerificationCode), ctx, userID, verificationCode)
}

// DecodeAccessToken mocks base method.
func (m *MockAuthManager) DecodeAccessToken(ctx context.Context, accessToken string) (*domain.AccessTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(*domain.AccessTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessToken indicates an expected call of DecodeAccessToken.
func (mr *MockAuthManagerMockRecorder) DecodeAccessToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessToken", reflect.TypeOf((*MockAuthManager)(nil).DecodeAccessToken), ctx, accessToken)
}

// DecodeRefreshToken mocks base method.
func (m *MockAuthManager) DecodeRefreshToken(ctx context.Context, userID domain.UserID, RefreshToken string) (*domain.RefreshTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRefreshToken", ctx, userID, RefreshToken)
	ret0, _ := ret[0].(*domain.RefreshTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRefreshToken indicates an expected call of DecodeRefreshToken.
func (mr *MockAuthManagerMockRecorder) DecodeRefreshToken(ctx, userID, RefreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRefreshToken", reflect.TypeOf((*MockAuthManager)(nil).DecodeRefreshToken), ctx, userID, RefreshToken)
}

// DecodeResetPasswordToken mocks base method.
func (m *MockAuthManager) DecodeResetPasswordToken(ctx context.Context, resetPasswordToken string) (*domain.ResetPasswordTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeResetPasswordToken", ctx, resetPasswordToken)
	ret0, _ := ret[0].(*domain.ResetPasswordTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeResetPasswordToken indicates an expected call of DecodeResetPasswordToken.
func (mr *MockAuthManagerMockRecorder) DecodeResetPasswordToken(ctx, resetPasswordToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeResetPasswordToken", reflect.TypeOf((*MockAuthManager)(nil).DecodeResetPasswordToken), ctx, resetPasswordToken)
}

// GenerateAccessToken mocks base method.
func (m *MockAuthManager) GenerateAccessToken(ctx context.Context, userID domain.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockAuthManagerMockRecorder) GenerateAccessToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockAuthManager)(nil).GenerateAccessToken), ctx, userID)
}

// GenerateRefreshToken mocks base method.
func (m *MockAuthManager) GenerateRefreshToken(ctx context.Context, userID domain.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockAuthManagerMockRecorder) GenerateRefreshToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockAuthManager)(nil).GenerateRefreshToken), ctx, userID)
}

// GenerateResetPasswordToken mocks base method.
func (m *MockAuthManager) GenerateResetPasswordToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResetPasswordToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResetPasswordToken indicates an expected call of GenerateResetPasswordToken.
func (mr *MockAuthManagerMockRecorder) GenerateResetPasswordToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResetPasswordToken", reflect.TypeOf((*MockAuthManager)(nil).GenerateResetPasswordToken), ctx, token)
}

// GenerateVerificationCode mocks base method.
func (m *MockAuthManager) GenerateVerificationCode(ctx context.Context, userID domain.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVerificationCode", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateVerificationCode indicates an expected call of GenerateVerificationCode.
func (mr *MockAuthManagerMockRecorder) GenerateVerificationCode(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVerificationCode", reflect.TypeOf((*MockAuthManager)(nil).GenerateVerificationCode), ctx, userID)
}
