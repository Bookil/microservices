// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/user.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./internal/ports/user.go -destination=mocks/user_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Bookil/microservices/auth/internal/application/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserPorts is a mock of UserPorts interface.
type MockUserPorts struct {
	ctrl     *gomock.Controller
	recorder *MockUserPortsMockRecorder
}

// MockUserPortsMockRecorder is the mock recorder for MockUserPorts.
type MockUserPortsMockRecorder struct {
	mock *MockUserPorts
}

// NewMockUserPorts creates a new mock instance.
func NewMockUserPorts(ctrl *gomock.Controller) *MockUserPorts {
	mock := &MockUserPorts{ctrl: ctrl}
	mock.recorder = &MockUserPortsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPorts) EXPECT() *MockUserPortsMockRecorder {
	return m.recorder
}

// GetUserIDByEmail mocks base method.
func (m *MockUserPorts) GetUserIDByEmail(ctx context.Context, email string) (domain.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByEmail", ctx, email)
	ret0, _ := ret[0].(domain.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByEmail indicates an expected call of GetUserIDByEmail.
func (mr *MockUserPortsMockRecorder) GetUserIDByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByEmail", reflect.TypeOf((*MockUserPorts)(nil).GetUserIDByEmail), ctx, email)
}

// Register mocks base method.
func (m *MockUserPorts) Register(ctx context.Context, firstName, lastName, email string) (domain.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, firstName, lastName, email)
	ret0, _ := ret[0].(domain.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserPortsMockRecorder) Register(ctx, firstName, lastName, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserPorts)(nil).Register), ctx, firstName, lastName, email)
}
