// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/db.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./internal/ports/db.go -destination=./mocks/db_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Bookil/microservices/auth/internal/application/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDBPort is a mock of DBPort interface.
type MockDBPort struct {
	ctrl     *gomock.Controller
	recorder *MockDBPortMockRecorder
}

// MockDBPortMockRecorder is the mock recorder for MockDBPort.
type MockDBPortMockRecorder struct {
	mock *MockDBPort
}

// NewMockDBPort creates a new mock instance.
func NewMockDBPort(ctrl *gomock.Controller) *MockDBPort {
	mock := &MockDBPort{ctrl: ctrl}
	mock.recorder = &MockDBPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBPort) EXPECT() *MockDBPortMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockDBPort) ChangePassword(ctx context.Context, userID domain.UserID, hashedPassword string) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userID, hashedPassword)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockDBPortMockRecorder) ChangePassword(ctx, userID, hashedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockDBPort)(nil).ChangePassword), ctx, userID, hashedPassword)
}

// ClearFailedLoginAttempts mocks base method.
func (m *MockDBPort) ClearFailedLoginAttempts(ctx context.Context, userID domain.UserID) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearFailedLoginAttempts", ctx, userID)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearFailedLoginAttempts indicates an expected call of ClearFailedLoginAttempts.
func (mr *MockDBPortMockRecorder) ClearFailedLoginAttempts(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFailedLoginAttempts", reflect.TypeOf((*MockDBPort)(nil).ClearFailedLoginAttempts), ctx, userID)
}

// Create mocks base method.
func (m *MockDBPort) Create(ctx context.Context, auth *domain.Auth) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, auth)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDBPortMockRecorder) Create(ctx, auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDBPort)(nil).Create), ctx, auth)
}

// DeleteByID mocks base method.
func (m *MockDBPort) DeleteByID(ctx context.Context, userID domain.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockDBPortMockRecorder) DeleteByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockDBPort)(nil).DeleteByID), ctx, userID)
}

// GetByID mocks base method.
func (m *MockDBPort) GetByID(ctx context.Context, userID domain.UserID) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDBPortMockRecorder) GetByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDBPort)(nil).GetByID), ctx, userID)
}

// IncrementFailedLoginAttempts mocks base method.
func (m *MockDBPort) IncrementFailedLoginAttempts(ctx context.Context, userID domain.UserID) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFailedLoginAttempts", ctx, userID)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementFailedLoginAttempts indicates an expected call of IncrementFailedLoginAttempts.
func (mr *MockDBPortMockRecorder) IncrementFailedLoginAttempts(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFailedLoginAttempts", reflect.TypeOf((*MockDBPort)(nil).IncrementFailedLoginAttempts), ctx, userID)
}

// LockAccount mocks base method.
func (m *MockDBPort) LockAccount(ctx context.Context, userID domain.UserID, lockDuration time.Duration) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAccount", ctx, userID, lockDuration)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockAccount indicates an expected call of LockAccount.
func (mr *MockDBPortMockRecorder) LockAccount(ctx, userID, lockDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAccount", reflect.TypeOf((*MockDBPort)(nil).LockAccount), ctx, userID, lockDuration)
}

// Save mocks base method.
func (m *MockDBPort) Save(ctx context.Context, auth *domain.Auth) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, auth)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockDBPortMockRecorder) Save(ctx, auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDBPort)(nil).Save), ctx, auth)
}

// UnlockAccount mocks base method.
func (m *MockDBPort) UnlockAccount(ctx context.Context, userID domain.UserID) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockAccount", ctx, userID)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockAccount indicates an expected call of UnlockAccount.
func (mr *MockDBPortMockRecorder) UnlockAccount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockAccount", reflect.TypeOf((*MockDBPort)(nil).UnlockAccount), ctx, userID)
}

// VerifyEmail mocks base method.
func (m *MockDBPort) VerifyEmail(ctx context.Context, userID domain.UserID) (*domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, userID)
	ret0, _ := ret[0].(*domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockDBPortMockRecorder) VerifyEmail(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockDBPort)(nil).VerifyEmail), ctx, userID)
}
