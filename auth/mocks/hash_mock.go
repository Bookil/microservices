// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/hash.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./internal/ports/hash.go -destination=./mocks/hash_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHashManager is a mock of HashManager interface.
type MockHashManager struct {
	ctrl     *gomock.Controller
	recorder *MockHashManagerMockRecorder
}

// MockHashManagerMockRecorder is the mock recorder for MockHashManager.
type MockHashManagerMockRecorder struct {
	mock *MockHashManager
}

// NewMockHashManager creates a new mock instance.
func NewMockHashManager(ctrl *gomock.Controller) *MockHashManager {
	mock := &MockHashManager{ctrl: ctrl}
	mock.recorder = &MockHashManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashManager) EXPECT() *MockHashManagerMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockHashManager) CheckPasswordHash(password, hashedPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", password, hashedPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockHashManagerMockRecorder) CheckPasswordHash(password, hashedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockHashManager)(nil).CheckPasswordHash), password, hashedPassword)
}

// HashPassword mocks base method.
func (m *MockHashManager) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHashManagerMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHashManager)(nil).HashPassword), password)
}
