// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/email.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./internal/ports/email.go -destination=./mocks/email_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailPort is a mock of EmailPort interface.
type MockEmailPort struct {
	ctrl     *gomock.Controller
	recorder *MockEmailPortMockRecorder
}

// MockEmailPortMockRecorder is the mock recorder for MockEmailPort.
type MockEmailPortMockRecorder struct {
	mock *MockEmailPort
}

// NewMockEmailPort creates a new mock instance.
func NewMockEmailPort(ctrl *gomock.Controller) *MockEmailPort {
	mock := &MockEmailPort{ctrl: ctrl}
	mock.recorder = &MockEmailPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailPort) EXPECT() *MockEmailPortMockRecorder {
	return m.recorder
}

// SendResetPassword mocks base method.
func (m *MockEmailPort) SendResetPassword(url, token, email string, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPassword", url, token, email, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPassword indicates an expected call of SendResetPassword.
func (mr *MockEmailPortMockRecorder) SendResetPassword(url, token, email, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPassword", reflect.TypeOf((*MockEmailPort)(nil).SendResetPassword), url, token, email, duration)
}

// SendVerificationCode mocks base method.
func (m *MockEmailPort) SendVerificationCode(email, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationCode", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationCode indicates an expected call of SendVerificationCode.
func (mr *MockEmailPortMockRecorder) SendVerificationCode(email, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationCode", reflect.TypeOf((*MockEmailPort)(nil).SendVerificationCode), email, code)
}

// SendWelcome mocks base method.
func (m *MockEmailPort) SendWelcome(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWelcome", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWelcome indicates an expected call of SendWelcome.
func (mr *MockEmailPortMockRecorder) SendWelcome(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWelcome", reflect.TypeOf((*MockEmailPort)(nil).SendWelcome), email)
}
