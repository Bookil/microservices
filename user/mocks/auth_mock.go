// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/auth.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=./internal/ports/auth.go -destination=./mocks/auth_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Bookil/microservices/user/internal/application/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthPort is a mock of AuthPort interface.
type MockAuthPort struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPortMockRecorder
}

// MockAuthPortMockRecorder is the mock recorder for MockAuthPort.
type MockAuthPortMockRecorder struct {
	mock *MockAuthPort
}

// NewMockAuthPort creates a new mock instance.
func NewMockAuthPort(ctrl *gomock.Controller) *MockAuthPort {
	mock := &MockAuthPort{ctrl: ctrl}
	mock.recorder = &MockAuthPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPort) EXPECT() *MockAuthPortMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthPort) Authenticate(ctx context.Context, accessToken string) (domain.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, accessToken)
	ret0, _ := ret[0].(domain.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthPortMockRecorder) Authenticate(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthPort)(nil).Authenticate), ctx, accessToken)
}

// ChangePassword mocks base method.
func (m *MockAuthPort) ChangePassword(ctx context.Context, userID domain.UserID, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userID, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthPortMockRecorder) ChangePassword(ctx, userID, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthPort)(nil).ChangePassword), ctx, userID, oldPassword, newPassword)
}

// DeleteAccount mocks base method.
func (m *MockAuthPort) DeleteAccount(ctx context.Context, userID domain.UserID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAuthPortMockRecorder) DeleteAccount(ctx, userID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAuthPort)(nil).DeleteAccount), ctx, userID, password)
}
